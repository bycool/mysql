一，核心模块间的互换
	1，初始化模块
		当命令行启动服务器时(service mysqld start)，初始化模块结果控制权：
		1.1 解析配置文件和命令行参数
		1.2 分配全局存储缓冲区
		1.3 初始化全局变量和结构，加载访问控制表
		1.4 执行大量其它初始任务
	一旦完成初始化，<初始化模块>将控制权交给<链接管理器>,<链接管理器>开始监听来自回路中的客户端的链接。
	code: sql/mysqld.cc
	mysql_main()
		init_common_variables():通用变量初始化
			init_thread_environment():线程环境初始化，锁的初始化等。
		init_server_components():服务器部分的初始化。各种插件.
		grant_init():初始化表/列等级检测，加载mysql数据库内的表信息。
		init_slave():初始化slave结构体
		
	2，连接管理器
		连接管理器监听来自客户端的连接，然后将请求派发给线程管理器。
		handle_connections_sockets():处理新链接，分配新进程处理它们。
		mysql_main()
			handle_connections_sockets(){
				while(!abort_loop){
					select((int)max_used_connection, &readFDs,0,0,0);  //监听客户端描述符
				}
			}
		在handle_connections_sockets函数内，创建socket，监听客户端的链接。

	3，线程管理器
		线程管理器负责跟踪线程，确保分配线程，以处理来自客户端的链接。
		在处理连接的管理器的while循环中，当监听到客户端socket的链接后，创建THD用于客户端的链接管理，主要存储各种信息用于线程创建，
		创建线程调用mysql的回调函数add_connections ==> do_handle_one_connection @sql/sql_connect.cc

	4，连接线程
		链接线程是在已经建立的链接上处理客户端请求的工作核心。handle_one_connection().

	5，用户验证模块
		用户验证模块验证所连接的用户，并对包含该用户层权限信息的结构和变量进行初始化。
		check_connection() 				@sql/sql_connect.cc
		acl_check_host()   				@sql/sql_acl.cc
			create_random_string()		@sql/password.c
